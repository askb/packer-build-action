---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: "Packer Build Action"
description: "Execute Packer validate or build operations via a bastion host"
author: "The Linux Foundation"

inputs:
  # Operation Mode
  mode:
    description: "Operation mode: 'validate' (syntax check) or 'build' (full build)"
    required: true
    default: "validate"

  # Bastion Connection (from openstack-bastion-action outputs)
  bastion_ip:
    description: "Bastion Tailscale IP address (required for build mode)"
    required: false
    default: ""
  bastion_ssh_user:
    description: "SSH user for bastion connection"
    required: false
    default: "ubuntu"
  bastion_ssh_private_key:
    description: "SSH private key for bastion connection (required for build mode)"
    required: false
    default: ""

  # Packer Configuration
  packer_template:
    description: "Path to Packer template file (auto-discovers if empty)"
    required: false
    default: ""
  packer_vars_file:
    description: "Path to Packer variables file (auto-discovers if empty)"
    required: false
    default: ""
  packer_working_dir:
    description: "Working directory containing Packer files"
    required: false
    default: "."
  path_prefix:
    description: "Directory path prefix for action execution"
    required: false
    default: "target-repo"
  packer_version:
    description: "Packer version to use"
    required: false
    default: "1.11.2"

  # Cloud Configuration Files (base64 encoded)
  cloud_env_json:
    description: "Cloud environment JSON config (base64 encoded)"
    required: false
    default: ""
  clouds_yaml:
    description: "OpenStack clouds.yaml config (base64 encoded)"
    required: false
    default: ""

  # OpenStack Credentials (for generating cloud configs)
  openstack_auth_url:
    description: "OpenStack auth URL"
    required: false
    default: ""
  openstack_project_id:
    description: "OpenStack project/tenant ID"
    required: false
    default: ""
  openstack_username:
    description: "OpenStack username"
    required: false
    default: ""
  openstack_password:
    description: "OpenStack password (base64 decoded if needed)"
    required: false
    default: ""
  openstack_region:
    description: "OpenStack region"
    required: false
    default: "ca-ymq-1"
  openstack_network_id:
    description: "OpenStack network UUID for builds"
    required: false
    default: ""
  openstack_domain_name:
    description: "OpenStack domain name (required for v3 API)"
    required: false
    default: "Default"
  os_cloud:
    description: "OpenStack cloud name from clouds.yaml"
    required: false
    default: "openstack"

  # Build Environment Configuration
  ansible_version:
    description: "Ansible version to install"
    required: false
    default: "9.2.0"
  python_version:
    description: "Python version for build environment"
    required: false
    default: "3.11"

outputs:
  validation_result:
    description: "Validation result summary"
    value: ${{ steps.execute.outputs.validation_result }}
  image_name:
    description: "Built image name (build mode only)"
    value: ${{ steps.execute.outputs.image_name }}
  image_id:
    description: "Built image ID (build mode only)"
    value: ${{ steps.execute.outputs.image_id }}
  build_status:
    description: "Build completion status"
    value: ${{ steps.execute.outputs.build_status }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs and install dependencies
      shell: bash
      run: |
        if [[ "${{ inputs.mode }}" == "build" && -z "${{ inputs.bastion_ip }}" ]]; then
          echo "❌ Error: bastion_ip is required for build mode"
          exit 1
        fi

        # Install jq if not available (needed for cloud-env.json generation)
        if ! command -v jq &> /dev/null; then
          echo "📦 Installing jq..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
        fi

        echo "✅ Input validation passed"

    - name: Setup Python
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ inputs.python_version }}

    - name: Setup Packer
      uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232 # v3.1.0
      with:
        version: ${{ inputs.packer_version }}

    - name: Install Ansible and dependencies
      shell: bash
      run: |
        echo "📦 Installing Ansible ${{ inputs.ansible_version }}..."
        pip install --upgrade pip
        pip install ansible==${{ inputs.ansible_version }} jinja2
        ansible --version

    - name: Install Ansible Galaxy roles
      shell: bash
      working-directory: ${{ inputs.path_prefix }}/${{ inputs.packer_working_dir }}
      run: |
        if [[ -f "common-packer/requirements.yaml" ]]; then
          echo "📦 Installing Ansible Galaxy roles..."
          ansible-galaxy role install -r common-packer/requirements.yaml -p common-packer/roles
        elif [[ -f "requirements.yaml" ]]; then
          echo "📦 Installing Ansible Galaxy roles..."
          ansible-galaxy role install -r requirements.yaml -p roles
        else
          echo "ℹ️  No Ansible Galaxy requirements found, skipping..."
        fi

    - name: Setup cloud configuration
      shell: bash
      working-directory: ${{ inputs.path_prefix }}/${{ inputs.packer_working_dir }}
      run: |
        set -euo pipefail
        # Create cloud-env.json if not provided
        if [[ -n "${{ inputs.cloud_env_json }}" ]]; then
          echo "${{ inputs.cloud_env_json }}" | base64 -d > cloud-env.json
        elif [[ -n "${{ inputs.openstack_auth_url }}" ]]; then
          # Decode password - it's expected to be base64 encoded
          # Try to decode, if it fails, use as-is
          if DECODED_PASSWORD=$(echo "${{ inputs.openstack_password }}" | base64 -d 2>/dev/null); then
            echo "✅ Password decoded from base64"
          else
            DECODED_PASSWORD="${{ inputs.openstack_password }}"
            echo "ℹ️  Using password as-is (not base64 encoded)"
          fi

          # Create cloud-env.json using jq to properly escape special characters
          jq -n \
            --arg auth_url "${{ inputs.openstack_auth_url }}" \
            --arg tenant "${{ inputs.openstack_project_id }}" \
            --arg domain "${{ inputs.openstack_domain_name }}" \
            --arg username "${{ inputs.openstack_username }}" \
            --arg password "${DECODED_PASSWORD}" \
            --arg region "${{ inputs.openstack_region }}" \
            --arg network "${{ inputs.openstack_network_id }}" \
            --arg ssh_proxy "${{ inputs.bastion_ip }}" \
            '{
              cloud_auth_url: $auth_url,
              cloud_tenant_name: $tenant,
              cloud_domain_name: $domain,
              cloud_username: $username,
              cloud_password: $password,
              cloud_region: $region,
              cloud_network: $network,
              ssh_proxy_host: $ssh_proxy
            }' > cloud-env.json

          echo "✅ Created cloud-env.json configuration"
        fi

        # Create clouds.yaml if provided or generate from credentials
        if [[ -n "${{ inputs.clouds_yaml }}" ]]; then
          mkdir -p "$HOME/.config/openstack"
          echo "${{ inputs.clouds_yaml }}" | base64 -d > "$HOME/.config/openstack/clouds.yaml"
          echo "✅ OpenStack clouds.yaml created from base64 input"
        elif [[ -n "${{ inputs.os_cloud }}" ]] && [[ -n "${{ inputs.openstack_auth_url }}" ]]; then
          # Auto-generate clouds.yaml from OpenStack credentials
          mkdir -p "$HOME/.config/openstack"

          # Decode password if it's base64 encoded
          password="${{ inputs.openstack_password }}"
          if echo "$password" | base64 -d &> /dev/null; then
            password=$(echo "$password" | base64 -d)
          fi

          cat > "$HOME/.config/openstack/clouds.yaml" << EOF
        clouds:
          ${{ inputs.os_cloud }}:
            auth:
              auth_url: ${{ inputs.openstack_auth_url }}
              username: ${{ inputs.openstack_username }}
              password: $password
              project_id: ${{ inputs.openstack_project_id }}
              user_domain_name: ${{ inputs.openstack_domain_name }}
              project_domain_name: ${{ inputs.openstack_domain_name }}
            region_name: ${{ inputs.openstack_region }}
        EOF
          echo "✅ Auto-generated clouds.yaml for cloud: ${{ inputs.os_cloud }}"
        fi

    - name: Initialize Packer plugins
      shell: bash
      working-directory: ${{ inputs.path_prefix }}/${{ inputs.packer_working_dir }}
      run: |
        set -e
        echo "🔌 Initializing Packer plugins..."

        TEMPLATE="${{ inputs.packer_template }}"
        if [[ -n "$TEMPLATE" ]]; then
          packer init "$TEMPLATE"
        else
          # Init all templates if no specific template provided
          for template in $(find . -name "*.pkr.hcl" -type f); do
            echo "Initializing $template..."
            packer init "$template"
          done
        fi

    - name: Execute Packer operation
      id: execute
      shell: bash
      working-directory: ${{ inputs.path_prefix }}/${{ inputs.packer_working_dir }}
      env:
        OS_CLOUD: ${{ inputs.os_cloud }}
      run: |
        # Start SSH agent for Packer (required even for Tailscale SSH)
        # Packer requires ssh_bastion_agent_auth to be true, so we need an agent running
        # Tailscale SSH will handle actual authentication, agent can be empty
        if [[ "${{ inputs.mode }}" == "build" ]]; then
          eval "$(ssh-agent -s)"
          export SSH_AUTH_SOCK SSH_AGENT_PID
          echo "✅ SSH agent started for Packer (PID: $SSH_AGENT_PID)"
        fi

        set -e

        MODE="${{ inputs.mode }}"
        TEMPLATE="${{ inputs.packer_template }}"
        VARS_FILE="${{ inputs.packer_vars_file }}"

        # Ensure provision directory is accessible
        # Check if provision exists in examples and symlink to current dir
        if [[ -d "examples/provision" && ! -d "provision" ]]; then
          echo "Creating symlink to examples/provision..."
          ln -s examples/provision provision
        fi

        if [[ "$MODE" == "validate" ]]; then
          echo "🔍 Running Packer validation..."
          ${{ github.action_path }}/scripts/validate-packer.sh
          echo "validation_result=success" >> $GITHUB_OUTPUT
        elif [[ "$MODE" == "build" ]]; then
          echo "🔨 Running Packer build..."

          # Build via bastion
          if [[ -z "$TEMPLATE" || -z "$VARS_FILE" ]]; then
            echo "❌ Error: packer_template and packer_vars_file required for build mode"
            exit 1
          fi

          PACKER_CMD="packer build"
          PACKER_CMD="$PACKER_CMD -var-file=cloud-env.json"
          PACKER_CMD="$PACKER_CMD -var-file=$VARS_FILE"
          if [[ -n "${{ inputs.bastion_ip }}" ]]; then
            PACKER_CMD="$PACKER_CMD -var bastion_host=${{ inputs.bastion_ip }}"
            PACKER_CMD="$PACKER_CMD -var bastion_user=${{ inputs.bastion_ssh_user }}"
          fi
          PACKER_CMD="$PACKER_CMD $TEMPLATE"

          echo "Executing: $PACKER_CMD"
          eval $PACKER_CMD

          echo "build_status=success" >> $GITHUB_OUTPUT
          echo "image_name=Built successfully" >> $GITHUB_OUTPUT
        else
          echo "❌ Error: Invalid mode '$MODE'"
          exit 1
        fi

branding:
  icon: "package"
  color: "blue"
