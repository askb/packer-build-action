# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: Network Connectivity Diagnostics

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      keep_bastion_alive:
        description: "Keep bastion running for manual debugging (minutes, 0 to teardown immediately)"
        required: false
        default: "30"

permissions:
  contents: read

jobs:
  network-diagnostics:
    name: Tailscale Network Connectivity Test
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Setup bastion with enhanced logging
        id: bastion
        uses: askb/tailscale-openstack-bastion-action@main
        with:
          operation: setup
          tailscale_oauth_client_id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          tailscale_oauth_secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tailscale_tags: "tag:bastion"
          openstack_auth_url: ${{ secrets.OPENSTACK_AUTH_URL }}
          openstack_project_id: ${{ secrets.OPENSTACK_PROJECT_ID }}
          openstack_username: ${{ secrets.OPENSTACK_USERNAME }}
          openstack_password: ${{ secrets.OPENSTACK_PASSWORD_B64 }}
          openstack_region: ${{ secrets.OPENSTACK_REGION }}
          bastion_name: "network-test-${{ github.run_id }}"
          bastion_flavor: "v3-standard-2"
          bastion_image: "Ubuntu 22.04.5 LTS (x86_64) [2025-03-27]"
          bastion_network: "odlci"
          bastion_wait_timeout: "600"
          debug_mode: true

      - name: Comprehensive Network Diagnostics
        id: diagnostics
        continue-on-error: true
        run: |
          set +e  # Don't exit on errors, we want to collect all diagnostics
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 TAILSCALE NETWORK CONNECTIVITY DIAGNOSTICS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          BASTION_IP="${{ steps.bastion.outputs.bastion_ip }}"
          BASTION_NAME="network-test-${{ github.run_id }}"
          
          echo "📋 Configuration:"
          echo "  Bastion IP: $BASTION_IP"
          echo "  Bastion Name: $BASTION_NAME"
          echo ""
          
          # Get runner's Tailscale IP
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Runner Tailscale Status"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          RUNNER_TS_IP=$(tailscale ip -4 2>/dev/null || echo "unknown")
          echo "Runner Tailscale IP: $RUNNER_TS_IP"
          echo ""
          
          echo "Full Tailscale status:"
          sudo tailscale status || echo "Failed to get tailscale status"
          echo ""
          
          echo "Tailscale network check:"
          sudo tailscale netcheck || echo "Failed to run netcheck"
          echo ""
          
          # Test 1: Ping bastion
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 1: Ping Bastion"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if ping -c 5 -W 2 "$BASTION_IP" 2>&1; then
            echo "✅ Can ping bastion"
            PING_OK=true
          else
            echo "❌ Cannot ping bastion"
            PING_OK=false
          fi
          echo ""
          
          # Test 2: TCP connectivity to SSH port
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 2: TCP Port 22 Connectivity"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if timeout 10 nc -zv "$BASTION_IP" 22 2>&1; then
            echo "✅ Port 22 is open"
            PORT_OK=true
          else
            echo "❌ Port 22 is not accessible"
            PORT_OK=false
          fi
          echo ""
          
          # Test 3: SSH connection attempts with verbose logging
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 3: SSH Connection Test (Verbose)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          timeout 15 ssh -vvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=10 root@"$BASTION_IP" "echo 'SSH OK'" 2>&1 || echo "SSH failed"
          SSH_EXIT=$?
          echo ""
          echo "SSH exit code: $SSH_EXIT"
          if [ $SSH_EXIT -eq 0 ]; then
            echo "✅ SSH successful"
            SSH_OK=true
          else
            echo "❌ SSH failed"
            SSH_OK=false
          fi
          echo ""
          
          # Test 4: Tailscale SSH (if available)
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 4: Tailscale SSH Test"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if timeout 15 tailscale ssh "root@$BASTION_NAME" "echo 'Tailscale SSH OK'" 2>&1; then
            echo "✅ Tailscale SSH successful"
            TS_SSH_OK=true
          else
            echo "❌ Tailscale SSH failed"
            TS_SSH_OK=false
          fi
          echo ""
          
          # Test 5: Check if bastion can be resolved
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 5: DNS/Name Resolution"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if nslookup "$BASTION_NAME.tailc55980.ts.net" 2>&1; then
            echo "✅ Can resolve bastion hostname"
          else
            echo "⚠️  Cannot resolve bastion hostname (might be expected)"
          fi
          echo ""
          
          # Test 6: Traceroute to bastion
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 6: Traceroute to Bastion"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          traceroute -m 10 -w 2 "$BASTION_IP" 2>&1 || echo "Traceroute failed"
          echo ""
          
          # Test 7: Check Tailscale routes
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 7: Tailscale Routes"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ip route show | grep -E "100\.|tailscale" || echo "No Tailscale routes found"
          echo ""
          
          # Test 8: Check if bastion is responding to ICMP at all
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Test 8: Extended Ping Test (30 packets)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ping -c 30 -i 0.5 -W 2 "$BASTION_IP" 2>&1 | tail -20
          echo ""
          
          # Summary
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DIAGNOSTIC SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Runner Tailscale IP: $RUNNER_TS_IP"
          echo "Bastion Tailscale IP: $BASTION_IP"
          echo ""
          echo "Test Results:"
          [ "$PING_OK" = "true" ] && echo "  ✅ Ping" || echo "  ❌ Ping"
          [ "$PORT_OK" = "true" ] && echo "  ✅ Port 22" || echo "  ❌ Port 22"
          [ "$SSH_OK" = "true" ] && echo "  ✅ SSH" || echo "  ❌ SSH"
          [ "$TS_SSH_OK" = "true" ] && echo "  ✅ Tailscale SSH" || echo "  ❌ Tailscale SSH"
          echo ""
          
          # Set outputs
          echo "ping_ok=$PING_OK" >> "$GITHUB_OUTPUT"
          echo "ssh_ok=$SSH_OK" >> "$GITHUB_OUTPUT"
          echo "bastion_ip=$BASTION_IP" >> "$GITHUB_OUTPUT"
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "⏰ Keeping bastion alive for ${{ github.event.inputs.keep_bastion_alive || '30' }} minutes for manual inspection..."
          echo ""
          echo "📋 To check bastion console logs in OpenStack:"
          echo "   1. Go to OpenStack dashboard"
          echo "   2. Find instance: network-test-${{ github.run_id }}"
          echo "   3. View Console Log"
          echo ""
          echo "📋 Bastion should have cloud-init logs showing:"
          echo "   - Tailscale installation"
          echo "   - Tailscale authentication"
          echo "   - Network configuration"
          echo "   - SSH service status"
          echo ""
          
          # Keep alive for manual debugging
          WAIT_MINUTES=${{ github.event.inputs.keep_bastion_alive || '30' }}
          if [ "$WAIT_MINUTES" -gt 0 ]; then
            echo "Waiting ${WAIT_MINUTES} minutes before teardown..."
            sleep $((WAIT_MINUTES * 60))
          fi

      - name: Get bastion details for manual inspection
        if: always()
        run: |
          DECODED_PASSWORD=$(echo "${{ secrets.OPENSTACK_PASSWORD_B64 }}" | base64 -d)
          
          export OS_AUTH_URL="${{ secrets.OPENSTACK_AUTH_URL }}"
          export OS_PROJECT_ID="${{ secrets.OPENSTACK_PROJECT_ID }}"
          export OS_USERNAME="${{ secrets.OPENSTACK_USERNAME }}"
          export OS_PASSWORD="$DECODED_PASSWORD"
          export OS_REGION_NAME="${{ secrets.OPENSTACK_REGION }}"
          export OS_IDENTITY_API_VERSION=3
          
          pip3 install -q python-openstackclient
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Bastion Instance Details"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          openstack server show "network-test-${{ github.run_id }}" || echo "Instance not found"
          echo ""
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Bastion Console Log (last 100 lines)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          openstack console log show "network-test-${{ github.run_id }}" | tail -100 || echo "No console log available"

      - name: Teardown bastion
        if: always()
        uses: askb/tailscale-openstack-bastion-action@main
        with:
          operation: teardown
          bastion_name: "network-test-${{ github.run_id }}"
          openstack_auth_url: ${{ secrets.OPENSTACK_AUTH_URL }}
          openstack_project_id: ${{ secrets.OPENSTACK_PROJECT_ID }}
          openstack_username: ${{ secrets.OPENSTACK_USERNAME }}
          openstack_password: ${{ secrets.OPENSTACK_PASSWORD_B64 }}
          openstack_region: ${{ secrets.OPENSTACK_REGION }}

      - name: Summary
        if: always()
        run: |
          {
            echo "## Network Connectivity Diagnostics Results"
            echo ""
            echo "### Configuration"
            echo "- **Bastion IP**: ${{ steps.diagnostics.outputs.bastion_ip || 'unknown' }}"
            echo "- **Bastion Name**: network-test-${{ github.run_id }}"
            echo ""
            echo "### Test Results"
            if [[ "${{ steps.diagnostics.outputs.ping_ok }}" == "true" ]]; then
              echo "- ✅ **Ping**: Success"
            else
              echo "- ❌ **Ping**: Failed"
            fi
            
            if [[ "${{ steps.diagnostics.outputs.ssh_ok }}" == "true" ]]; then
              echo "- ✅ **SSH**: Success"
            else
              echo "- ❌ **SSH**: Failed"
            fi
            echo ""
            echo "### Next Steps"
            if [[ "${{ steps.diagnostics.outputs.ssh_ok }}" != "true" ]]; then
              echo ""
              echo "**SSH connection failed. Check:**"
              echo "1. OpenStack console logs for bastion instance"
              echo "2. Tailscale ACL configuration"
              echo "3. Bastion VM firewall rules"
              echo "4. cloud-init logs on bastion VM"
            fi
            echo ""
            echo "### Manual Inspection"
            echo "The bastion instance was kept alive for ${{ github.event.inputs.keep_bastion_alive || '30' }} minutes."
            echo "Check OpenStack console for instance: \`network-test-${{ github.run_id }}\`"
          } >> "${GITHUB_STEP_SUMMARY}"
